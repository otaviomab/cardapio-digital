/**
 * Servi√ßo centralizado para c√°lculo de dist√¢ncia entre endere√ßos
 * Este servi√ßo encapsula a l√≥gica de comunica√ß√£o com a API do Google Maps
 * e fornece fun√ß√µes reutiliz√°veis para todo o sistema
 */

import { 
  InvalidParametersError, 
  DistanceCalculationError, 
  GoogleApiError, 
  AddressNotFoundError 
} from './errors';
import { coordinatesCache, distanceCache, Coordinates } from './cacheService';
import { 
  calculateHaversineDistance, 
  calculateOptimalDistance, 
  isPointWithinRadius 
} from './distanceCalculationService';

// Configura√ß√£o para uso de algoritmos locais vs. API do Google
export const DISTANCE_CONFIG = {
  // Se true, usa algoritmos locais para c√°lculos preliminares
  useLocalAlgorithms: true,
  
  // Dist√¢ncia m√°xima (em km) para confiar apenas em algoritmos locais
  // Para dist√¢ncias maiores que isso, a API do Google ser√° usada para confirma√ß√£o
  maxDistanceForLocalOnly: 5,
  
  // Se true, usa a API do Google para confirmar resultados de algoritmos locais
  useGoogleForConfirmation: true,
  
  // Limite de diferen√ßa (em km) entre o c√°lculo local e o do Google
  // Se a diferen√ßa for maior que isso, o resultado do Google ser√° usado
  maxDifferenceTolerance: 0.5
};

/**
 * Calcula a dist√¢ncia entre dois endere√ßos usando a API Distance Matrix do Google
 * @param origin Endere√ßo de origem (pode ser texto completo ou apenas CEP)
 * @param destination Endere√ßo de destino (pode ser texto completo ou apenas CEP)
 * @returns Dist√¢ncia em quil√¥metros (arredondada para 2 casas decimais)
 */
export async function calculateDistance(
  origin: string,
  destination: string
): Promise<number> {
  try {
    if (!origin || !destination) {
      throw new InvalidParametersError('Origem e destino s√£o obrigat√≥rios');
    }

    // Verifica se a dist√¢ncia j√° est√° em cache
    const cachedDistance = distanceCache.get(origin, destination);
    if (cachedDistance !== null) {
      console.log('‚úÖ Usando dist√¢ncia em cache:', cachedDistance, 'km');
      return cachedDistance;
    }

    // Tenta obter coordenadas do cache primeiro
    let originCoords: Coordinates | null = coordinatesCache.get(origin);
    let destinationCoords: Coordinates | null = coordinatesCache.get(destination);

    // Se as coordenadas n√£o estiverem em cache, busca na API
    if (!originCoords) {
      originCoords = await getAddressCoordinates(origin);
      // Armazena no cache para uso futuro
      coordinatesCache.set(origin, originCoords);
    }

    if (!destinationCoords) {
      destinationCoords = await getAddressCoordinates(destination);
      // Armazena no cache para uso futuro
      coordinatesCache.set(destination, destinationCoords);
    }

    // Se configurado para usar algoritmos locais, calcula a dist√¢ncia localmente primeiro
    let distance: number;
    let useGoogleApi = true;

    if (DISTANCE_CONFIG.useLocalAlgorithms) {
      // Calcula a dist√¢ncia usando o algoritmo local mais adequado
      const localDistance = calculateOptimalDistance(originCoords, destinationCoords);
      console.log('üìè Dist√¢ncia calculada localmente:', localDistance, 'km');
      
      // Se a dist√¢ncia for pequena o suficiente, podemos confiar apenas no c√°lculo local
      if (localDistance <= DISTANCE_CONFIG.maxDistanceForLocalOnly && !DISTANCE_CONFIG.useGoogleForConfirmation) {
        useGoogleApi = false;
        distance = localDistance;
      } else {
        // Caso contr√°rio, usamos o Google para confirmar
        if (DISTANCE_CONFIG.useGoogleForConfirmation) {
          const googleDistance = await calculateDistanceByCoordinatesWithGoogle(originCoords, destinationCoords);
          console.log('üìè Dist√¢ncia calculada pelo Google:', googleDistance, 'km');
          
          // Compara os resultados
          const difference = Math.abs(localDistance - googleDistance);
          console.log('üìä Diferen√ßa entre c√°lculos:', difference, 'km');
          
          if (difference <= DISTANCE_CONFIG.maxDifferenceTolerance) {
            // Se a diferen√ßa for aceit√°vel, usa o c√°lculo local (mais r√°pido para pr√≥ximas consultas)
            distance = localDistance;
          } else {
            // Se a diferen√ßa for grande, confia no Google
            distance = googleDistance;
          }
        } else {
          // Se n√£o estamos usando o Google para confirma√ß√£o, usa o c√°lculo local
          distance = localDistance;
        }
      }
    } else {
      // Se n√£o estamos usando algoritmos locais, usa diretamente a API do Google
      distance = await calculateDistanceByCoordinatesWithGoogle(originCoords, destinationCoords);
    }
    
    // Armazena a dist√¢ncia calculada no cache
    distanceCache.set(origin, destination, distance);
    
    return distance;
  } catch (error) {
    // Se j√° for um erro espec√≠fico, propaga
    if (error instanceof InvalidParametersError || 
        error instanceof DistanceCalculationError || 
        error instanceof GoogleApiError ||
        error instanceof AddressNotFoundError) {
      console.error(`‚ùå ${error.name}:`, error.message);
      throw error;
    }
    
    // Caso contr√°rio, converte para um erro espec√≠fico
    console.error('‚ùå Erro ao calcular dist√¢ncia:', error);
    throw new DistanceCalculationError(
      origin, 
      destination, 
      error instanceof Error ? error.message : 'Erro desconhecido'
    );
  }
}

/**
 * Obt√©m as coordenadas geogr√°ficas de um endere√ßo usando a API Geocoding do Google
 * @param address Endere√ßo completo ou CEP
 * @returns Objeto com latitude e longitude
 */
export async function getAddressCoordinates(address: string): Promise<Coordinates> {
  try {
    if (!address) {
      throw new InvalidParametersError('Endere√ßo √© obrigat√≥rio');
    }

    // Verifica se as coordenadas j√° est√£o em cache
    const cachedCoords = coordinatesCache.get(address);
    if (cachedCoords !== null) {
      console.log('‚úÖ Usando coordenadas em cache para:', address);
      return cachedCoords;
    }

    console.log('üåê Buscando coordenadas na API para:', address);
    const response = await fetch(
      `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
        address
      )}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`
    );

    const data = await response.json();

    // Verifica se a API retornou um status de erro
    if (data.status !== 'OK') {
      if (data.status === 'ZERO_RESULTS') {
        throw new AddressNotFoundError(address);
      } else {
        throw new GoogleApiError(data.status, data.error_message);
      }
    }

    // Verifica se h√° resultados
    if (!data.results || data.results.length === 0) {
      throw new AddressNotFoundError(address);
    }

    const { lat, lng } = data.results[0].geometry.location;
    const coordinates = { lat, lng };

    // Armazena as coordenadas no cache
    coordinatesCache.set(address, coordinates);

    return coordinates;
  } catch (error) {
    // Se j√° for um erro espec√≠fico, propaga
    if (error instanceof InvalidParametersError || 
        error instanceof AddressNotFoundError || 
        error instanceof GoogleApiError) {
      console.error(`‚ùå ${error.name}:`, error.message);
      throw error;
    }
    
    // Caso contr√°rio, converte para um erro espec√≠fico
    console.error('‚ùå Erro ao buscar coordenadas:', error);
    throw new AddressNotFoundError(address);
  }
}

/**
 * Calcula a dist√¢ncia entre dois pontos usando a API do Google
 * @param origin Coordenadas de origem
 * @param destination Coordenadas de destino
 * @returns Dist√¢ncia em quil√¥metros (arredondada para 2 casas decimais)
 */
export async function calculateDistanceByCoordinatesWithGoogle(
  origin: Coordinates,
  destination: Coordinates
): Promise<number> {
  try {
    if (!origin || !destination || 
        typeof origin.lat !== 'number' || typeof origin.lng !== 'number' ||
        typeof destination.lat !== 'number' || typeof destination.lng !== 'number') {
      throw new InvalidParametersError('Coordenadas de origem e destino s√£o obrigat√≥rias e devem ser n√∫meros');
    }

    // Verifica se a dist√¢ncia j√° est√° em cache
    const cachedDistance = distanceCache.get(origin, destination);
    if (cachedDistance !== null) {
      console.log('‚úÖ Usando dist√¢ncia em cache:', cachedDistance, 'km');
      return cachedDistance;
    }

    // Calcula a dist√¢ncia usando a Google Maps Distance Matrix API
    console.log('üåê Enviando requisi√ß√£o para Google Maps API');
    const response = await fetch(
      `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${origin.lat},${origin.lng}&destinations=${destination.lat},${destination.lng}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`
    );

    const data = await response.json();
    console.log('üì° Resposta do Google Maps API:', data);

    // Verifica se a API retornou um status de erro
    if (data.status !== 'OK') {
      throw new GoogleApiError(data.status, data.error_message);
    }

    // Verifica se a resposta √© v√°lida
    if (!data.rows?.[0]?.elements?.[0]) {
      throw new DistanceCalculationError(
        `${origin.lat},${origin.lng}`, 
        `${destination.lat},${destination.lng}`, 
        'Resposta da API inv√°lida'
      );
    }

    // Verifica se o elemento tem um status de erro
    if (data.rows[0].elements[0].status !== 'OK') {
      throw new GoogleApiError(data.rows[0].elements[0].status);
    }

    // Pega a dist√¢ncia em metros e converte para km
    const distanceInMeters = data.rows[0].elements[0].distance.value;
    const distanceInKm = distanceInMeters / 1000;
    
    // Arredonda para duas casas decimais
    const roundedDistance = Math.round(distanceInKm * 100) / 100;
    
    // Armazena a dist√¢ncia calculada no cache
    distanceCache.set(origin, destination, roundedDistance);
    
    return roundedDistance;
  } catch (error) {
    // Se j√° for um erro espec√≠fico, propaga
    if (error instanceof InvalidParametersError || 
        error instanceof DistanceCalculationError || 
        error instanceof GoogleApiError) {
      console.error(`‚ùå ${error.name}:`, error.message);
      throw error;
    }
    
    // Caso contr√°rio, converte para um erro espec√≠fico
    console.error('‚ùå Erro ao calcular dist√¢ncia por coordenadas:', error);
    throw new DistanceCalculationError(
      `${origin.lat},${origin.lng}`, 
      `${destination.lat},${destination.lng}`, 
      error instanceof Error ? error.message : 'Erro desconhecido'
    );
  }
}

/**
 * Calcula a dist√¢ncia entre dois pontos usando coordenadas geogr√°ficas
 * Usa algoritmos locais ou a API do Google, dependendo da configura√ß√£o
 * @param origin Coordenadas de origem
 * @param destination Coordenadas de destino
 * @returns Dist√¢ncia em quil√¥metros (arredondada para 2 casas decimais)
 */
export async function calculateDistanceByCoordinates(
  origin: Coordinates,
  destination: Coordinates
): Promise<number> {
  try {
    if (!origin || !destination || 
        typeof origin.lat !== 'number' || typeof origin.lng !== 'number' ||
        typeof destination.lat !== 'number' || typeof destination.lng !== 'number') {
      throw new InvalidParametersError('Coordenadas de origem e destino s√£o obrigat√≥rias e devem ser n√∫meros');
    }

    // Verifica se a dist√¢ncia j√° est√° em cache
    const cachedDistance = distanceCache.get(origin, destination);
    if (cachedDistance !== null) {
      console.log('‚úÖ Usando dist√¢ncia em cache:', cachedDistance, 'km');
      return cachedDistance;
    }

    // Se configurado para usar algoritmos locais, calcula a dist√¢ncia localmente primeiro
    let distance: number;

    if (DISTANCE_CONFIG.useLocalAlgorithms) {
      // Calcula a dist√¢ncia usando o algoritmo local mais adequado
      const localDistance = calculateOptimalDistance(origin, destination);
      console.log('üìè Dist√¢ncia calculada localmente:', localDistance, 'km');
      
      // Se a dist√¢ncia for pequena o suficiente, podemos confiar apenas no c√°lculo local
      if (localDistance <= DISTANCE_CONFIG.maxDistanceForLocalOnly && !DISTANCE_CONFIG.useGoogleForConfirmation) {
        distance = localDistance;
      } else {
        // Caso contr√°rio, usamos o Google para confirmar
        if (DISTANCE_CONFIG.useGoogleForConfirmation) {
          try {
            const googleDistance = await calculateDistanceByCoordinatesWithGoogle(origin, destination);
            console.log('üìè Dist√¢ncia calculada pelo Google:', googleDistance, 'km');
            
            // Compara os resultados
            const difference = Math.abs(localDistance - googleDistance);
            console.log('üìä Diferen√ßa entre c√°lculos:', difference, 'km');
            
            if (difference <= DISTANCE_CONFIG.maxDifferenceTolerance) {
              // Se a diferen√ßa for aceit√°vel, usa o c√°lculo local (mais r√°pido para pr√≥ximas consultas)
              distance = localDistance;
            } else {
              // Se a diferen√ßa for grande, confia no Google
              distance = googleDistance;
            }
          } catch (error) {
            // Se houver erro na API do Google, usa o c√°lculo local como fallback
            console.warn('‚ö†Ô∏è Erro na API do Google, usando c√°lculo local como fallback:', error);
            distance = localDistance;
          }
        } else {
          // Se n√£o estamos usando o Google para confirma√ß√£o, usa o c√°lculo local
          distance = localDistance;
        }
      }
    } else {
      // Se n√£o estamos usando algoritmos locais, usa diretamente a API do Google
      distance = await calculateDistanceByCoordinatesWithGoogle(origin, destination);
    }
    
    // Armazena a dist√¢ncia calculada no cache
    distanceCache.set(origin, destination, distance);
    
    return distance;
  } catch (error) {
    // Se j√° for um erro espec√≠fico, propaga
    if (error instanceof InvalidParametersError || 
        error instanceof DistanceCalculationError || 
        error instanceof GoogleApiError) {
      console.error(`‚ùå ${error.name}:`, error.message);
      throw error;
    }
    
    // Caso contr√°rio, converte para um erro espec√≠fico
    console.error('‚ùå Erro ao calcular dist√¢ncia por coordenadas:', error);
    throw new DistanceCalculationError(
      `${origin.lat},${origin.lng}`, 
      `${destination.lat},${destination.lng}`, 
      error instanceof Error ? error.message : 'Erro desconhecido'
    );
  }
}

/**
 * Verifica rapidamente se um ponto est√° dentro de um raio de dist√¢ncia de outro ponto
 * Usa algoritmos locais para c√°lculo r√°pido, sem precisar da API do Google
 * @param center Coordenadas do ponto central
 * @param point Coordenadas do ponto a verificar
 * @param radiusKm Raio em quil√¥metros
 * @returns true se o ponto estiver dentro do raio, false caso contr√°rio
 */
export function isWithinRadius(
  center: Coordinates,
  point: Coordinates,
  radiusKm: number
): boolean {
  return isPointWithinRadius(center, point, radiusKm);
} 