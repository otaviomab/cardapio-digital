'use client'

import { useState } from 'react'
import { XCircle, RotateCw } from 'lucide-react'

export interface ApiLogEntry {
  timestamp: string;
  type: 'request' | 'response' | 'error';
  endpoint: string;
  method: string;
  data?: any;
}

interface ApiLogViewerProps {
  logs: ApiLogEntry[];
  onClear: () => void;
  onRefresh?: () => void;
}

export function ApiLogViewer({ logs, onClear, onRefresh }: ApiLogViewerProps) {
  const [expanded, setExpanded] = useState(false);

  return (
    <div className="rounded-lg border border-gray-200 bg-white p-6 mt-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-base font-medium text-gray-900">
          Logs de API
        </h3>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setExpanded(!expanded)}
            className="text-sm font-medium text-krato-600 hover:text-krato-700"
          >
            {expanded ? 'Ocultar Logs' : 'Mostrar Logs'}
          </button>
          {onRefresh && (
            <button
              onClick={onRefresh}
              className="flex items-center gap-1 rounded-md border border-gray-300 bg-white px-2 py-1 text-xs font-medium text-gray-700 hover:bg-gray-50"
            >
              <RotateCw className="h-3 w-3" />
              Atualizar
            </button>
          )}
          <button
            onClick={onClear}
            className="flex items-center gap-1 rounded-md border border-gray-300 bg-white px-2 py-1 text-xs font-medium text-gray-700 hover:bg-gray-50"
          >
            <XCircle className="h-3 w-3" />
            Limpar
          </button>
        </div>
      </div>
      
      {expanded && (
        <div className="mt-2 max-h-96 overflow-y-auto rounded border border-gray-200">
          {logs.length === 0 ? (
            <p className="p-4 text-sm text-gray-500">Nenhum log disponível.</p>
          ) : (
            <div className="divide-y divide-gray-200">
              {logs.map((log, index) => (
                <div key={index} className="p-3">
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center gap-2">
                      <span className={`inline-block h-2 w-2 rounded-full ${
                        log.type === 'request' ? 'bg-blue-500' : 
                        log.type === 'response' ? 'bg-green-500' : 'bg-red-500'
                      }`}></span>
                      <span className="text-xs font-medium text-gray-700">
                        {log.type === 'request' ? 'Requisição' : 
                         log.type === 'response' ? 'Resposta' : 'Erro'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {new Date(log.timestamp).toLocaleTimeString()}
                      </span>
                    </div>
                    <span className="text-xs font-medium text-gray-700">
                      {log.method} {log.endpoint}
                    </span>
                  </div>
                  <div className="mt-1">
                    <pre className="text-xs text-gray-700 bg-gray-50 p-2 rounded overflow-x-auto">
                      {JSON.stringify(log.data, null, 2)}
                    </pre>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
} 